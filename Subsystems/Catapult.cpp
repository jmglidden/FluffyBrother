// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Catapult.h"
#include "../Robotmap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
#include "WPIErrors.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
Catapult::Catapult() : PIDSubsystem("Catapult", -0.003, -0.001, -0.005) {
	SetAbsoluteTolerance(5.0);
	GetPIDController()->SetContinuous(false);
	LiveWindow::GetInstance()->AddActuator("Catapult", "PIDSubsystem Controller", GetPIDController());
	GetPIDController()->SetOutputRange(-1.0, 0.35);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	encoder = RobotMap::catapultEncoder;
	jag2 = RobotMap::catapultJag2;
	jag3 = RobotMap::catapultJag3;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// Use these to get going:
	// SetSetpoint() -  Sets where the PID controller should move the system
	//                  to
	// Enable() - Enables the PID controller.
}
double Catapult::ReturnPIDInput() {
	// Return your input value for the PID loop
	// e.g. a sensor, like a potentiometer:
	// yourPot->SetAverageVoltage() / kYourMaxVoltage;	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return encoder->PIDGet();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}
void Catapult::UsePIDOutput(double output) {
	// Use output to drive your system, like a motor
	// e.g. yourMotor->Set(output);
	PIDWriteSync(output);
}
void Catapult::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//setDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Catapult::PIDWriteSync(double output){
	if (jag2->GetControlMode() == CANJaguar::kPercentVbus){
		jag2->Set(output, 1);
		jag3->Set(output, 1);
		jag2->UpdateSyncGroup(1);
	}
	else
		wpi_setWPIErrorWithContext(IncompatibleMode, "PID only supported in PercentVbus mode");
}
void Catapult::CatLimitOut(double min, double max){
	GetPIDController()->SetOutputRange(min, max);
}
bool Catapult::IsReturning(){
	return encoder->GetDirection();
}
void Catapult::ResetEncoder(){
	encoder->Reset();
}
