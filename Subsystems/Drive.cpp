// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Drive.h"
#include "../Robotmap.h"
#include "../robot.h"
#include "../Commands/DriveStraightTele.h"
Drive::Drive() : Subsystem("Drive") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	lSpeed = RobotMap::driveLSpeed;
	rSpeed = RobotMap::driveRSpeed;
	control = RobotMap::driveControl;
	gyro = RobotMap::driveGyro;
	turn = RobotMap::driveTurn;
	gyroPID = RobotMap::driveGyroPID;
	lEncoder = RobotMap::driveLEncoder;
	rEncoder = RobotMap::driveREncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	lcd = Robot::oi->GetLCD();
	rStick = Robot::oi->getRStick();
}
    
void Drive::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new DriveStraightTele());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Drive::UseKomodoDrive(float throttleCmd, float turnStick){
	gyroPID->Enable();
	float turnCmd = GetPIDTurnCmd(turnStick);
	lcd->PrintfLine(DriverStationLCD::kUser_Line2, "Current Heading: %f", gyro->GetAngle());
	lcd->PrintfLine(DriverStationLCD::kUser_Line3, "Turn Command: %f", turnCmd);
	lcd->PrintfLine(DriverStationLCD::kUser_Line4, "Speed Command: %f", throttleCmd);
	lcd->UpdateLCD();
	control->KomodoArcadeDrive(throttleCmd, turnCmd);
}
void Drive::UseArcadeDrive(float throttleCmd, float turnCmd){
	lcd->Clear();
	lcd->PrintfLine(DriverStationLCD::kUser_Line1, "Using Arcade Drive");
	lcd->UpdateLCD();
	gyroPID->Disable();
	control->KomodoArcadeDrive(throttleCmd, turnCmd, false); //delete 3rd argument to go back to using  squared inputs (default)
}
float Drive::GetPIDTurnCmd(float stick){
	float deadBand = .1;
	if (stick < -deadBand || stick > deadBand){
		LockHeading();
		return -stick;
	}
	else return turn->Get();
}
float Drive::LockHeading(){
	float lockedHeading = gyro->GetAngle();
	gyroPID->SetSetpoint(lockedHeading);
	lcd->PrintfLine(DriverStationLCD::kUser_Line1, "Locked Heading: %f", lockedHeading);
	lcd->UpdateLCD();
	return lockedHeading;
}
void Drive::ResetEncoders(){
	lEncoder->Reset();
	rEncoder->Reset();
}
double Drive::GetAvgDistance(){
	return (lEncoder->GetDistance() + rEncoder->GetDistance())/2;
}
double Drive::GetRate(){
	return (lEncoder->GetRate()+rEncoder->GetRate())/2;
}
